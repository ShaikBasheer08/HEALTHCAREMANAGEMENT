package com.cognizant.healthcare.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cognizant.healthcare.DTO.AppointmentDTO;
import com.cognizant.healthcare.DTO.ConsultationDTO;
import com.cognizant.healthcare.DTO.PatientDTO;
import com.cognizant.healthcare.entity.Appointment;
import com.cognizant.healthcare.entity.Consultation;
import com.cognizant.healthcare.entity.Doctor;
import com.cognizant.healthcare.entity.Patient;
import com.cognizant.healthcare.repository.AppointmentRepository;
import com.cognizant.healthcare.repository.ConsultationRepository;
import com.cognizant.healthcare.repository.DoctorRepository;
import com.cognizant.healthcare.repository.PatientRepository;

@Service
public class PatientService {

    @Autowired
    private PatientRepository patientRepository;

    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private ConsultationRepository consultationRepository;

    @Autowired
    private DoctorRepository doctorRepository;

    // Create a new patient
    public PatientDTO createPatient(PatientDTO patientDTO) {
        Patient patient = mapToEntity(patientDTO);
        Patient savedPatient = patientRepository.save(patient);
        return mapToDTO(savedPatient);
    }

    // Get a patient by ID (returns Optional)
    public Optional<PatientDTO> getPatientById(Long patientId) {
        return patientRepository.findById(patientId).map(this::mapToDTO);
    }

    // Update patient details (uses Optional)
    public Optional<PatientDTO> updatePatient(Long patientId, PatientDTO updatedPatientDTO) {
        return patientRepository.findById(patientId).map(existingPatient -> {
            existingPatient.setAge(updatedPatientDTO.getAge());
            existingPatient.setGender(updatedPatientDTO.getGender());
            existingPatient.setCurrentMedications(updatedPatientDTO.getCurrentMedications());
            existingPatient.setMedicalHistory(updatedPatientDTO.getMedicalHistory());
            Patient updatedPatient = patientRepository.save(existingPatient);
            return mapToDTO(updatedPatient);
        });
    }

    // Delete a patient by ID
    public void deletePatient(Long patientId) {
        patientRepository.deleteById(patientId);
    }

    // Book an appointment
    public AppointmentDTO bookAppointment(Long patientId, Long doctorId, String timeslot) {
        Patient patient = patientRepository.findById(patientId)
                .orElseThrow(() -> new RuntimeException("Patient not found"));
        Doctor doctor = doctorRepository.findById(doctorId)
                .orElseThrow(() -> new RuntimeException("Doctor not found"));

        // Validate doctor's availability
        boolean isAvailable = doctor.getAvailabilityList().stream()
                .anyMatch(availability -> availability.getTimeslot().equals(timeslot));
        if (!isAvailable) {
            throw new RuntimeException("Doctor is not available at the requested time slot");
        }

        // Validate patient conflicts
        boolean hasConflict = appointmentRepository.findByPatient_PatientID(patientId).stream()
                .anyMatch(appointment -> appointment.getTimeslot().equals(timeslot));
        if (hasConflict) {
            throw new RuntimeException("Patient already has an appointment at this time slot");
        }

        // Create and save appointment
        Appointment appointment = new Appointment();
        appointment.setPatient(patient);
        appointment.setDoctor(doctor);
        appointment.setTimeslot(timeslot);
        appointment.setStatus("Booked");
        Appointment savedAppointment = appointmentRepository.save(appointment);
        return mapToDTO(savedAppointment);
    }

    // View consultation history for a patient
    public List<ConsultationDTO> getConsultationHistory(Long patientId) {
        return consultationRepository.findByAppointment_Patient_PatientID(patientId).stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    // Utility methods to map entities to DTOs
    private Patient mapToEntity(PatientDTO patientDTO) {
        Patient patient = new Patient();
        patient.setAge(patientDTO.getAge());
        patient.setGender(patientDTO.getGender());
        patient.setCurrentMedications(patientDTO.getCurrentMedications());
        patient.setMedicalHistory(patientDTO.getMedicalHistory());
        return patient;
    }

    private PatientDTO mapToDTO(Patient patient) {
        PatientDTO patientDTO = new PatientDTO();
        patientDTO.setPatientID(patient.getPatientID());
        patientDTO.setAge(patient.getAge());
        patientDTO.setGender(patient.getGender());
        patientDTO.setCurrentMedications(patient.getCurrentMedications());
        patientDTO.setMedicalHistory(patient.getMedicalHistory());
        return patientDTO;
    }

    private AppointmentDTO mapToDTO(Appointment appointment) {
        AppointmentDTO appointmentDTO = new AppointmentDTO();
        appointmentDTO.setAppointmentID(appointment.getAppointmentID());
        appointmentDTO.setTimeslot(appointment.getTimeslot());
        appointmentDTO.setStatus(appointment.getStatus());
        return appointmentDTO;
    }

    private ConsultationDTO mapToDTO(Consultation consultation) {
        ConsultationDTO consultationDTO = new ConsultationDTO();
        consultationDTO.setConsultationID(consultation.getConsultationID());
        consultationDTO.setNotes(consultation.getNotes());
        consultationDTO.setPrescription(consultation.getPrescription());
        return consultationDTO;
    }
}
